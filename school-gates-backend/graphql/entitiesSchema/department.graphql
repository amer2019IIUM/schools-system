#extend type Mutation {
#    createDepartment(input: CreateDepartmentInput! @spread): Department @create
#
#    updateDepartment(id: ID!, input: UpdateDepartmentInput! @spread): Department @update
#
#    deleteDepartment(id: ID!): Department @delete
#
#    restoreDepartment(id: ID!): Department @restore
#}
extend type Query {
    departments (
        orderBy: _ @orderBy(columnsEnum: "DepartmentColumns")
        where: _ @whereConditions(columnsEnum: "DepartmentColumns")
        administrators: _ @whereHasConditions(columnsEnum: "AdministratorColumns")
    ): [Department!]! @paginate(type: PAGINATOR, defaultCount: 10)

    department (
        where: _ @whereConditions(columnsEnum: "DepartmentColumns")
        administrators: _ @whereHasConditions(columnsEnum: "AdministratorColumns")
    ): Department @first
}

type Department {
    id: ID
    name: String
    created_at: DateTime
    updated_at: DateTime
    school: School @belongsTo
    administrators: [Administrator!]! @hasMany(type: PAGINATOR, defaultCount: 10)
}

enum DepartmentColumns {
    ID
    NAME
    CREATED_AT
    UPDATED_AT
}

#input CreateDepartmentInput @validator {
#    title: String
#    description: String
#    price: Float
#    negotiable: Boolean
#    status: Int
#    user: CreateUserBelongsTo
#    taxonomyContents: CreateTaxonomyContentBelongsToMany
#    attachments: CreateAttachmentBelongsToMany
#}
#input UpdateDepartmentInput @validator {
#    title: String
#    description: String
#    price: Float
#    attachments: CreateAttachmentBelongsToMany
#}
#input CreateUserBelongsTo {
#    connect: ID
#}
#input CreateTaxonomyContentBelongsToMany {
#    connect: [ID!]
#}
#input CreateAttachmentBelongsToMany {
#    connect: [ID!]
#    create: [CreateAttachmentHasManyInputs]
#    delete: [ID!]
#    connect: [ID!]
#    disconnect: [ID!]
#}
#input DeleteDepartmentInput {
#    delete: ID
#}
#input CreateAttachmentHasManyInputs {
#    path: String
#    disk_name: String
#    type: AttachmentTypes!
#    file_name: String
#    thumbnail: Boolean
#}
